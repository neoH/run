#! /usr/bin/env python3

"""
---------------------------------------------------------------------------------------------
# File    : fgen
# Author  : Neo.H
# Date    : Sep 19, 2018
# Version : v1.00
---------------------------------------------------------------------------------------------
A sub command to generate the file list for both simulation and debug.
For simulation , there should be the specified compile.lis
---------------------------------------------------------------------------------------------
inputs:
	-eda <edatool>, specify the eda tool, for now, valid only for VCS tool, and interfaces will
be sustained for other eda tools, mainly for xcelium.
	-help, help option to display all valid options for fgen tool.
	-rtl <rtl_type>, specify the rtl type to lead the tool to generate the different combination
of compile.lis. Default rtl_type is 'asic'.
	-path <dest_path>, specify the path to generate the filelist, this is an optional param, if
not specified, the default path: <proj_home>/out/sim/<rtl_type>/tests/ will be used.
	-proj_home <path>, the project home specified by caller.
	-erf <file_name>, external rtl file, this means the file should be added to rtl.lis, with
different rtl mode, the erf can specify corresponding rtl modules.
	-esf <file_name>, TBD
	-uvc <uvc_name>, TBD
	-y <libraries>, to specify the library path, by different eda tools, this option will be
translated to the corresponding options recognized by the tool. Besides, this option only
support the eda tool that can support filelist option insertion.
	-libext <extensions>, this option work together with -y option, to specify the searching
file with specified extension. This option can be input with multiple times for specifying
multiple extensions.
	-target <target name>, the option specify the destined usage for calling this tool. the
target name for now are valid within:
		-- sim: for simulation, in this target, the compile.lis, rtl.lis, dpi.lis, fsim.lis and
sim_model.lis will be generated nomatter files above exists or not.
		-- wav: for wave vision, in this target, wave.lis, rtl.lis, fsim.lis and sim_model.lis will
be generated nomatter files above exists or not.
	-pt <proj_type>: the project type option, valid only within IP and SOC.
	-debug: debug switch, if enterred, the debug information will be displayed.
---------------------------------------------------------------------------------------------
outputs, for different target, different list will be generated.
	sim:
		-- <o_path>/compile.lis
		-- <o_path>/rtl.lis: storing all RTL files.
		-- <o_path>/dpi.lis: list of dpi.
		-- <o_path>/fsim.lis: storing all verification files for functional simulation.
		-- <o_path>/sim_model.lis: storing all simulation modules that act the behavior for some
RTL modules.
	wav:
		-- <o_path>/verdi.lis, a list for verdi tool.
		-- <o_path>/rtl.lis: storing all RTL files.
		-- <o_path>/fsim.lis: storing all verification files for functional simulation.
		-- <o_path>/sim_model.lis: storing all simulation modules that act the behavior for some
RTL modules.
---------------------------------------------------------------------------------------------
exit SIGs:
	-- 0, a normal exit
	-- 1, program fatal
	-- 2, program process error
---------------------------------------------------------------------------------------------
generating considerations:
	-- common dir will be included as +incdir+<commons>
---------------------------------------------------------------------------------------------
	-- compile.lis: the list for eda tools, which constains the rtl.lis, verif_fsim.lis and
sim_model.lis.
---------------------------------------------------------------------------------------------
Requirements:
	Features of fgen should be redefined because of the lacking requirements. Requirements are
listed as the following:
-- specified orderings of files in one dir, this feature will be actived as the special file
in current dir: *.od, wherever it occurrs, all files and dirs within this dir will be specified
by this file.
--

---------------------------------------------------------------------------------------------
"""

import sys;
from options import options;
from shell import shell;
import foper;

## exit SIGs when executing this program
## this exit SIG defines in this program and is used as a protocol interface
## for other programs which calls fgen

g_sig{} = {
	'normal' : 0,   ## normal exit, with no any other errors.
	'rtle'   : 1,   ## error occurred when generating RTL list.
	'sme'    : 2,   ## error occurred when generating sim model list
	'verife' : 3,   ## error occurred when generating verify list.
};

###########################################################################

## -- global vars declaration ----------------------------------------------------------------
g_prog_home = '.'; ## default run_home is current dir
## -------------------------------------------------------------------------------------------

sh = shell();
## RUN_HOME ENV are needed in ENV var.
##
## the return type of get_output is list, while the g_prog_home is string, so need
## the following code for assignment.
[g_prog_home] = sh.get_output('echo $RUN_HOME');
if not g_prog_home:  ## {
	print(" no $RUN_HOME VAR found in ENV, please setup your ENV first.");
	sys.exit(1); ## system done, pre-build fatal.
## }
## else system not done, to add the $RUN_HOME/inc path to PYTHONPATH
##
sys.path.append(g_prog_home+'/inc');

#################################
## after loading the system path, then to  check other options.
import rpt;
from pcfg_fgen import pcfg_fgen; ## the fgen program configure file.
import fi; ## fgen include file, store all used sub routines.

## after importing the pf module.
pf = pcfg_fgen(sys.argv,rpt);

if pf.g_help:  ## {
	## if help is True, then enter into help mode
	pf.help();
	sys.exit(g_sig['normal']); ## then call normal exit
## }

## -------------------------------------------------------------------------------------------
## Program Process:
##
## -------------------------------------------------------------------------------------------

## first to get the common list between wave list and simulation list.
## the only difference between verdi and simulation is dpi.lis
##

## ----------------------------------------------------------------------- ##
## this block to generate common file lists for almost all simulation tools
##
## -- get rtl list file
if fi.gen_rtl_lis(pf) == False: sys.exit();
##if fi.gen_rtl_lis(rtls,pf.g_o_path) == False: sys.exit(2);

## -- get sim_model list file.

## ----------------------------------------------------------------------- ##

## ----------------------------------------------------------------------------------------

## step 1. get eda tool ----------------------------------------------------------------------
if pf.g_eda == 'vcs':
	## block to process vcs tool, according to target: SIM/WAV

	## for synopsys tool, different target will include different filelist,
	if pf.g_target == 'sim':
		## in sim mode, following files are need:
		## <o_path>/compile.lis, this file contains: rtl.lis,dpi.lis,sim_model.lis,
		##
		##
	else:
		## else the target is WAV, used in verdi, need a special list that excluding the dpi list.
		##
	## }
else:
	## else use candence tool, here is TBD
	## TODO
	rpt.fatal("current version support vcs tool only.");
	sys.exit(1);
## }

## -------------------------------------------------------------------------------------------

## -------------------------------------------------------------------------------------------
## -------------------------------------------------------------------------------------------


sys.exit(0); ## at the end of this program, exit normally

## }
