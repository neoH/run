#! /usr/bin/env python3

"""
---------------------------------------------------------------------------------------------
# File    : fgen
# Author  : Neo.H
# Date    : Sep 19, 2018
# Version : v1.00
---------------------------------------------------------------------------------------------
A sub command to generate the file list for both simulation and debug.
For simulation , there should be the specified compile.lis
---------------------------------------------------------------------------------------------
inputs:
	-eda <edatool>, specify the eda tool, for now, valid only for VCS tool, and interfaces will
be sustained for other eda tools, mainly for xcelium.
	-help, help option to display all valid options for fgen tool.
	-rtl <rtl_type>, specify the rtl type to lead the tool to generate the different combination
of compile.lis. Default rtl_type is 'asic'.
	-path <dest_path>, specify the path to generate the filelist, this is an optional param, if
not specified, the default path: <proj_home>/out/sim/<rtl_type>/tests/ will be used.
	-proj_home <path>, the project home specified by caller.
	-erf <file_name>, external rtl file, this means the file should be added to rtl.lis, with
different rtl mode, the erf can specify corresponding rtl modules.
	-y <libraries>, to specify the library path, by different eda tools, this option will be
translated to the corresponding options recognized by the tool. Besides, this option only
support the eda tool that can support filelist option insertion.
	-libext <extensions>, this option work together with -y option, to specify the searching
file with specified extension. This option can be input with multiple times for specifying
multiple extensions.
	-target <target name>, the option specify the destined usage for calling this tool. the
target name for now are valid within:
		-- sim: for simulation, in this target, the compile.lis, rtl.lis, dpi.lis, fsim.lis and
sim_model.lis will be generated nomatter files above exists or not.
		-- wav: for wave vision, in this target, wave.lis, rtl.lis, fsim.lis and sim_model.lis will
be generated nomatter files above exists or not.
	-pt <proj_type>: the project type option, valid only within IP and SOC.
	-debug: debug switch, if enterred, the debug information will be displayed.
---------------------------------------------------------------------------------------------
outputs, for different target, different list will be generated.
	sim:
		-- <o_path>/compile.lis
		-- <o_path>/rtl.lis: storing all RTL files.
		-- <o_path>/dpi.lis: list of dpi.
		-- <o_path>/fsim.lis: storing all verification files for functional simulation.
		-- <o_path>/sim_model.lis: storing all simulation modules that act the behavior for some
RTL modules.
	wav:
		-- <o_path>/verdi.lis, a list for verdi tool.
		-- <o_path>/rtl.lis: storing all RTL files.
		-- <o_path>/fsim.lis: storing all verification files for functional simulation.
		-- <o_path>/sim_model.lis: storing all simulation modules that act the behavior for some
RTL modules.
---------------------------------------------------------------------------------------------
exit SIGs:
	-- 0, a normal exit
	-- 1, program fatal
---------------------------------------------------------------------------------------------
generating considerations:
	-- common dir will be included as +incdir+<commons>
---------------------------------------------------------------------------------------------
	-- compile.lis: the list for eda tools, which constains the rtl.lis, verif_fsim.lis and
sim_model.lis.
---------------------------------------------------------------------------------------------

"""

import sys;
from options import options;
from shell import shell;


## -- global vars declaration ----------------------------------------------------------------
proj_home = '.'; ## default proj_home is current dir
prog_home = '.'; ## default run_home is current dir
o_path = '';
g_opt_val = None;  ## for return value of pop_option func.
__g_debug__ = False;
## -------------------------------------------------------------------------------------------




sh = shell();
## RUN_HOME ENV are needed in ENV var.
##
## the return type of get_output is list, while the prog_home is string, so need
## the following code for assignment.
[prog_home] = sh.get_output('echo $RUN_HOME');
if not prog_home:  ## {
	print(" no $RUN_HOME VAR found in ENV, please setup your ENV first.");
	sys.exit(1); ## system done, pre-build fatal.
## }
## else system not done, to add the $RUN_HOME/inc path to PYTHONPATH
##
sys.path.append(prog_home+'/inc');

#################################
import rpt;
from pcfg import fgen_cfg;

## after loading the system path, then to  check other options.

cfg = fgen_cfg();

## -- option process -------------------------------------------------------------------------
g_opt = options();
if g_opt.load(sys.argv,cfg.__sopts) == False: ## {
	rpt.fatal("program fatal occurred when check option.");
	exit(1);

## }

g_opt.set_support('eda','specify the eda tool, for now, valid only for VCS tool, and interfaces \
	will be retained for other eda tools.','edatool');

g_opt.set_support('help','help option to display all valid options for fgen tool.');

g_opt.set_support('rtl','specify the rtl type to lead the tool to generate the different combination \
	of compile.lis. Default rtl_type is \'asic\'.','rtl_type');

g_opt.set_support('path','specify the path to generate the filelist, this is an optional param, if \
	not specified, the default path: <proj_home>/out/sim/<rtl_type>/tests/ will be used.','dest_path');

g_opt.set_support('proj_home','the project home specified by caller.','path');

	self.__opt__.set_support('erf','external rtl file, this means the file should be added to rtl.lis, with \
	different rtl mode, the erf can specify corresponding rtl modules.','file_name');

	self.__opt__.set_support('y','to specify the library path, by different eda tools, this option will be \
	translated to the corresponding options recognized by the tool. Besides, this option only \
	support the eda tool that can support filelist option insertion.','library');

	self.__opt__.set_support('libext','this option work together with -y option, to specify the searching \
	file with specified extension. This option can be input with multiple times for specifying \
	multiple extensions.','extensions');

	self.__opt__.set_support('target','the option specify the destined usage for calling this tool. the \
	target name for now are valid within: \
	\n -- sim: for simulation, in this target, the compile.lis, rtl.lis, dpi.lis, fsim.lis and \
	sim_model.lis will be generated nomatter files above exists or not. \
	\n -- wav: for wave vision, in this target, wave.lis, rtl.lis, fsim.lis and sim_model.lis will \
	be generated nomatter files above exists or not.','target_name');

	self.__opt__.set_support('pt','the project type option, valid only within IP and SOC.','proj_type');

	self.__opt__.set_support('debug','the debug enable switch, use this option to display debug information.');



## check debug option first ##
if g_opt.pop_option('debug') == True: __g_debug__ = True;
##############################

## -------------------------------------------------------------------------------------------

## }
